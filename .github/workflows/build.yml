name: Build and Package

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "maven"

      # 在构建步骤前添加缓存依赖，加速构建
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev fakeroot dpkg-dev binutils
          sudo apt-get install -y rpm

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          xcode-select --install || true

      # 设置图标扩展名
      - name: Set Windows image extension
        if: runner.os == 'Windows'
        run: echo "image-extension=ico" >> $env:GITHUB_ENV

      - name: Set Linux image extension
        if: runner.os == 'Linux'
        run: echo "image-extension=png" >> $GITHUB_ENV

      - name: Set macOS image extension
        if: runner.os == 'macOS'
        run: echo "image-extension=icns" >> $GITHUB_ENV

      - name: Build project
        run: mvn clean package -B -e
        continue-on-error: false

      - name: Create runtime image with jlink
        run: mvn javafx:jlink
        continue-on-error: false

      - name: Set target directory for Windows
        if: runner.os == 'Windows'
        run: echo "TARGET_DIR=${{ github.workspace }}/target" >> $env:GITHUB_ENV

      - name: Set target directory for Unix-like systems
        if: runner.os != 'Windows'
        run: echo "TARGET_DIR=${{ github.workspace }}/target" >> $GITHUB_ENV

      - name: Package application for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: mvn jpackage:jpackage "-Dimage-extension=${{ env.image-extension }}" "-Dinstaller.dir=${{ github.workspace }}/target/installer" "-Dinstaller.name=ProjectManagement-${{ runner.os }}" "-DruntimeImage=${{ env.TARGET_DIR }}/app"
        continue-on-error: false

      - name: Package application for Unix-like systems
        if: runner.os != 'Windows'
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing target directory:"
          ls -la target/

          # 创建 installer 目录
          mkdir -p target/installer
          echo "Created installer directory"

          echo "Listing installer directory:"
          ls -la target/installer/

          echo "Running jpackage with parameters:"
          echo "image-extension: ${{ env.image-extension }}"
          echo "installer.dir: ${{ github.workspace }}/target/installer"
          echo "installer.name: ProjectManagement-${{ runner.os }}"
          echo "runtimeImage: ${{ env.TARGET_DIR }}/app"

          if [ "${{ runner.os }}" == "macOS" ]; then
            mvn jpackage:jpackage \
              -Dimage-extension=${{ env.image-extension }} \
              -Dinstaller.dir="${{ github.workspace }}/target/installer" \
              -Dinstaller.name="ProjectManagement-${{ runner.os }}" \
              -DruntimeImage="${{ env.TARGET_DIR }}/app" \
              -DmacSign=false
          else
            mvn jpackage:jpackage \
              -Dimage-extension=${{ env.image-extension }} \
              -Dinstaller.dir="${{ github.workspace }}/target/installer" \
              -Dinstaller.name="ProjectManagement-${{ runner.os }}" \
              -DruntimeImage="${{ env.TARGET_DIR }}/app"
          fi

          echo "After jpackage - Listing installer directory:"
          ls -la target/installer/

          # 检查是否生成了安装包
          if [ "${{ runner.os }}" == "macOS" ]; then
            if [ -f "target/installer/ProjectManagementTool-1.0.dmg" ]; then
              echo "Installation package created successfully"
            else
              echo "Failed to create installation package"
              exit 1
            fi
          elif [ "${{ runner.os }}" == "Linux" ]; then
            if [ -f "target/installer/ProjectManagement-${{ runner.os }}.deb" ]; then
              echo "Installation package created successfully"
            else
              echo "Failed to create installation package"
              exit 1
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProjectManagement-${{ runner.os }}
          path: target/installer/
          retention-days: 90

      # 添加测试步骤
      - name: Test installation on Windows
        if: runner.os == 'Windows'
        run: |
          # 安装应用程序
          $installer = Get-ChildItem -Path "target/installer" -Filter "*.msi" | Select-Object -First 1
          Start-Process msiexec.exe -ArgumentList "/i", $installer.FullName, "/quiet", "/norestart" -Wait

          # 等待应用程序安装完成
          Start-Sleep -Seconds 10

          # 启动应用程序
          Start-Process "C:\Program Files\ProjectManagementTool\bin\ProjectManagementTool.exe" -Wait

          # 检查应用程序是否成功运行
          $process = Get-Process "ProjectManagementTool" -ErrorAction SilentlyContinue
          if ($process) {
            Write-Host "Application started successfully"
            Stop-Process $process
          } else {
            Write-Host "Failed to start application"
            exit 1
          }

      - name: Test installation on Linux
        if: runner.os == 'Linux'
        run: |
          # 安装应用程序
          sudo dpkg -i target/installer/*.deb

          # 等待应用程序安装完成
          sleep 10

          # 启动应用程序
          ProjectManagementTool &
          APP_PID=$!

          # 等待应用程序启动
          sleep 5

          # 检查应用程序是否成功运行
          if ps -p $APP_PID > /dev/null; then
            echo "Application started successfully"
            kill $APP_PID
          else
            echo "Failed to start application"
            exit 1
          fi

      - name: Test installation on macOS
        if: runner.os == 'macOS'
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing target directory:"
          ls -la target/
          echo "Listing installer directory:"
          ls -la target/installer/

          # 查找安装包
          DMG_FILE=$(find target/installer -name "*.dmg")
          if [ -z "$DMG_FILE" ]; then
            echo "No .dmg file found in target/installer"
            exit 1
          fi

          echo "Found package: $DMG_FILE"

          # 挂载 DMG 文件
          hdiutil attach "$DMG_FILE"

          # 等待挂载完成
          sleep 5

          # 启动应用程序
          open /Volumes/ProjectManagementTool/ProjectManagementTool.app

          # 等待应用程序启动
          sleep 5

          # 检查应用程序是否成功运行
          if pgrep -f "ProjectManagementTool" > /dev/null; then
            echo "Application started successfully"
            
            # 等待一段时间让应用程序完全启动
            sleep 10
            
            # 关闭应用程序
            pkill -f "ProjectManagementTool"
            
            # 等待应用程序完全关闭
            sleep 5
            
            # 确保应用程序已关闭
            if pgrep -f "ProjectManagementTool" > /dev/null; then
              echo "Application is still running, force killing..."
              pkill -9 -f "ProjectManagementTool"
              sleep 2
            fi
            
            # 卸载 DMG 文件
            hdiutil detach /Volumes/ProjectManagementTool -force
          else
            echo "Failed to start application"
            # 尝试卸载 DMG 文件
            hdiutil detach /Volumes/ProjectManagementTool -force
            exit 1
          fi
