name: Build and Package

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "maven"

      # 在构建步骤前添加缓存依赖，加速构建
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev fakeroot dpkg-dev binutils
          sudo apt-get install -y rpm

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          xcode-select --install || true

      # 设置图标扩展名
      - name: Set Windows image extension
        if: runner.os == 'Windows'
        run: echo "image-extension=ico" >> $env:GITHUB_ENV

      - name: Set Linux image extension
        if: runner.os == 'Linux'
        run: echo "image-extension=png" >> $GITHUB_ENV

      - name: Set macOS image extension
        if: runner.os == 'macOS'
        run: echo "image-extension=icns" >> $GITHUB_ENV

      - name: Build project
        run: mvn clean package -B -e
        continue-on-error: false

      - name: Create runtime image with jlink
        run: mvn javafx:jlink
        continue-on-error: false

      - name: Set target directory for Windows
        if: runner.os == 'Windows'
        run: echo "TARGET_DIR=${{ github.workspace }}/target" >> $env:GITHUB_ENV

      - name: Set target directory for Unix-like systems
        if: runner.os != 'Windows'
        run: echo "TARGET_DIR=${{ github.workspace }}/target" >> $GITHUB_ENV

      - name: Package application for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: mvn jpackage:jpackage "-Dimage-extension=${{ env.image-extension }}" "-Dinstaller.dir=${{ github.workspace }}/target/installer" "-Dinstaller.name=ProjectManagement-${{ runner.os }}" "-DruntimeImage=${{ env.TARGET_DIR }}/app"
        continue-on-error: false

      - name: Package application for Unix-like systems
        if: runner.os != 'Windows'
        run: |
          mvn jpackage:jpackage \
            -Dimage-extension=${{ env.image-extension }} \
            -Dinstaller.dir="${{ github.workspace }}/target/installer" \
            -Dinstaller.name="ProjectManagement-${{ runner.os }}" \
            -DruntimeImage="${{ env.TARGET_DIR }}/app"
        continue-on-error: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProjectManagement-${{ runner.os }}
          path: target/installer/
          retention-days: 7
